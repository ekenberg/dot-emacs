#+TITLE: Emacs Configuration
#+STARTUP OVERVIEW

* About

Based on [[https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org][Harry R. Schwartz emacs configuration.org]]

* Todo [100%]:

** DONE Can Emacs regularly remind me to update packages?           :ARCHIVE:

Maybe this? [[https://github.com/rranelli/auto-package-update.el][Auto package update]]

* Basic sanity, startup and paths

** Skip site-init

On legacy systems site-init can mess up local configuration

#+BEGIN_SRC emacs-lisp
  (setq inhibit-default-init t)
#+END_SRC

** Require version 24 or higher

#+BEGIN_SRC emacs-lisp
  (when (version< emacs-version "24")
    (let ((sleep-sec 4))
      (while (> sleep-sec 0)
        (message "This Emacs configuration requires major version 24 or higher! Exit in %d seconds" sleep-sec)
        (sit-for 1)
        (setq sleep-sec (1- sleep-sec)))
      (save-buffers-kill-terminal))
    )
#+END_SRC

** Path to custom functions and themes

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
#+END_SRC

** No startup message

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** Disable vc-backends

Faster startup, avoid hanging in git-enabled dirs with emacs-gtk on Linux

#+BEGIN_SRC emacs-lisp
  (setq vc-handled-backends ())
#+END_SRC

** Localized calendar (Swedish)
#+BEGIN_SRC emacs-lisp
  (load "sv-kalender")
#+END_SRC
* Package management

** Use Melpa

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (package-initialize)
#+END_SRC

** Setup 'use-package'

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

** Automatic package updates

#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (auto-package-update-maybe)
    (setq auto-package-update-interval 3) ;; days
    )
#+END_SRC

* Global keybinds and custom functions

** Backspace and C-h

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-h" 'backward-delete-char)
  (normal-erase-is-backspace-mode 0)
#+END_SRC

** Help key

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-+") 'help)
  (global-set-key (kbd "M-+") 'help) ;; can't make C-+ work on Mac in terminal
#+END_SRC

** Mac Meta Keymap

In iTerm2: Settings -> Profiles -> Keys set the alt-key you want to use to send 'ESC+'

*** Right alt-key as meta

#+BEGIN_SRC emacs-lisp
;;  (setq ns-alternate-modifier nil) ;; make both work as alt-key
;;  (setq ns-right-alternate-modifier (quote meta)) ;; make right send 'meta (left is still alt-key)
#+END_SRC

*** Left alt-key as meta

#+BEGIN_SRC emacs-lisp
  (setq ns-alternate-modifier (quote meta)) ;; make both work as meta
  (setq ns-right-alternate-modifier nil) ;; set right back to alt-key, left still sends meta
#+END_SRC

** Mac Toggle Fullscreen <F9>

#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
      (global-set-key [f9] 'toggle-frame-fullscreen))
#+END_SRC

** Mac Disable Print Keybind

Because I press it by accident, the popup is annoying and Emacs crashes if I accept to print...

#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
      (global-unset-key (kbd "s-p")))
#+END_SRC

** Switch windows when splitting

Thanks to Harry R Schwartz for these functions. Removed (balance-window), prefer to do that manually as needed.

#+BEGIN_SRC emacs-lisp
  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
#+END_SRC

** Toggle vertical/horizontal split of two windows

#+BEGIN_SRC emacs-lisp
  (load-library "rotate-frame-split")
  (global-set-key (kbd "\C-x 5") 'rotate-frame-split)
#+END_SRC

** Swap content between two windows

#+BEGIN_SRC emacs-lisp
  (load-library "swap-windows")
  (global-set-key (kbd "\C-x 6") 'swap-windows)
#+END_SRC

** Save buffer as new name but stay on old buffer

#+BEGIN_SRC emacs-lisp
  (load-library "save-copy-as")
  (global-set-key "\C-c\C-w" 'save-copy-as)
#+END_SRC

** Go to previous window anti-clockwise

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "\C-x p") '(lambda () (interactive) (other-window -1)))
#+END_SRC

** Kill buffer in other (next) window

Closing man-pages, help, warnings etc

#+BEGIN_SRC emacs-lisp
  (load-library "kill-buffer-other-window")
  (global-set-key (kbd "\C-x 4 k") 'kill-buffer-other-window)
#+END_SRC

** Open current file in external program

#+BEGIN_SRC emacs-lisp
  (defun my-open-current-file-in-external-program ()
    "Open underlying file of current buffer in external program"
    (interactive)

    ;; normal-type file buffer:
    (if buffer-file-name
        (progn
          (call-process
           (if (eq system-type 'darwin)
               "open"
             (read-shell-command "Open current file with: "))
           nil 0 nil buffer-file-name
           ))

      ;; else link/image/current-url in w3m:
      (if (string= major-mode "w3m-mode")
          (let (url)
            (setq url (or (w3m-anchor) (w3m-image) w3m-current-url))
            (when url
              (browse-url-default-browser url))))))

  (global-set-key (kbd "C-c o") 'my-open-current-file-in-external-program)
#+END_SRC

** Smart shell command

Pipe region to shell command derived from [[http://stackoverflow.com/questions/206806/filtering-text-through-a-shell-command-in-emacs][this question on stackoverflow]]

#+BEGIN_SRC emacs-lisp
  (load-library "smart-shell-command")
  (global-set-key (kbd "\C-x |") 'smart-shell-command)
#+END_SRC

** Manpage for command under cursor

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f1> ,") 'man-follow)
#+END_SRC

** Grep

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "\C-c g") 'grep)
  (setq next-error-highlight-no-select t) ; permanent highlight for matches
#+END_SRC

** Go to last change

#+BEGIN_SRC emacs-lisp
  (use-package goto-last-change
    :ensure t
    :commands (goto-last-change)
    :bind ("C-x C-u" . goto-last-change))
#+END_SRC

* Package settings and keybinds

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC

** Smex

M-x replacement

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :bind (("M-x" . smex)
           ("M-X" . smex-major-mode-commands)
           ("C-c C-c M-x" . execute-extended-command))) ;; old M-x
#+END_SRC

** Ivy

Interactive completion: [[http://oremacs.com/swiper/][Ivy webpage]]

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure swiper
    :demand t
    :init
    (setq ivy-use-virtual-buffers t)
    :config
    (ivy-mode 1)
    :bind (("C-s" . swiper) ;; replace default search
           :map ivy-mode-map
           ("C-h" . ivy-backward-delete-char) ;; use C-h in ivy popups/dialogs
           ))
#+END_SRC

** Avy

Emacs style navigation: [[https://github.com/abo-abo/avy][Avy on github]]

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind (("M-s" . avy-goto-char-2)))
#+END_SRC

** Org-mode

*** Directories
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org")
  (setq org-default-notes-file (concat org-directory "/Capture.org"))
  (setq org-default-drill-file (concat org-directory "/Drill/Drill.org"))
#+END_SRC

*** External applications
#+BEGIN_SRC emacs-lisp
  ;; open directory links in dired and not Finder (mac)
  (add-to-list 'org-file-apps '(directory . emacs))
#+END_SRC

*** Global keybinds for org-mode
#+BEGIN_SRC emacs-lisp
  ;; (bind-key installed as dependency from use-package, overrides any key using a hidden minor-mode)
  ;; https://emacs.stackexchange.com/questions/352/how-to-override-major-mode-bindings/360#360

  ;; These are global, ie not dependent on org-mode loaded:

  ;; Org Capture (using bind-key to override org-mode mapping:)
  (bind-key* (kbd "C-c C-x c") 'org-capture)

  ;; Save link to current file and line
  (global-set-key (kbd "C-c l") 'org-store-link)

  ;; Sort entries (TODO lists etc)
  (global-set-key (kbd "C-c s") 'org-sort-entries)
#+END_SRC

*** org-drill flashcard spaced repetition
#+BEGIN_SRC emacs-lisp
  (require 'org-drill)
  ;; göm headings för varje card:
  (setq org-drill-hide-item-headings-p t)
  (setq org-drill-add-random-noise-to-intervals-p t)
  (setq org-drill-adjust-intervals-for-early-and-late-repetitions-p t)
  (setq org-drill-learn-fraction 0.4) ; repetera frågor lite oftare, default = 0.5
  (setq org-drill-maximum-duration 40) ; 40m
#+END_SRC

*** Capture templates
#+BEGIN_SRC emacs-lisp
  (defun my-org-default-drill-capture-format ()
    "Basic drill template"
    (concat "** Fact:          :"
            (format "%s" org-drill-question-tag)
            ":\n:PROPERTIES:\n:DATE_ADDED: %<%Y-%m-%d>\n:END:\n\n%i%?\n\n*** Svar\n\n")
    )
  (setq org-capture-templates
        `(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
           "* TODO %?\n  %i\n" :prepend t)
          ("n" "Note" entry (file+headline org-default-notes-file "Notes")
           "* %T %?\n  %l")
          ;; org-drill ----------------------
          ("a" "Algebra Drill" entry (file+headline org-default-drill-file "Algebra och Diskret Matematik")
           ,(my-org-default-drill-capture-format) :empty-lines 1)
          ("d" "Drill (Blandat)" entry (file+headline org-default-drill-file "Blandat")
           ,(my-org-default-drill-capture-format) :empty-lines 1)
          ))
#+END_SRC
*** Archiving
#+BEGIN_SRC emacs-lisp
  (setq org-archive-location (concat org-directory "/Archive.org::* From %s"))
#+END_SRC

*** Custom colors

#+BEGIN_SRC emacs-lisp
  (defun my-org-custom-faces ()
    (setq default-background (face-attribute 'default :background))
    (set-face-attribute 'org-block-begin-line nil :background default-background :foreground "#b3e5fc" :box nil)
    (set-face-attribute 'org-block-end-line   nil :background default-background :foreground "#b3e5fc" :box nil)
    (set-face-attribute 'org-level-1 nil :inherit 'outline-1 :foreground "DarkOrange2"
                        :background default-background :box nil :weight 'bold :height 1.3)
    (set-face-attribute 'org-level-2 nil :inherit 'outline-2 :foreground "YellowGreen"
                        :background default-background :box nil :height 1.1)
    (set-face-attribute 'org-level-3 nil :foreground "CornflowerBlue" :background default-background))

  (add-hook 'org-mode-hook 'my-org-custom-faces)
#+END_SRC

*** Pretty header bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t)

  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))
#+END_SRC

*** Use ⤵ to show header collapsed mode

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

*** Code block syntax highlighting when editing

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

*** Code block make TAB act 'natively'

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

*** Enable resize inline images
#+BEGIN_SRC emacs-lisp
  (setq org-image-actual-width nil)
#+END_SRC
*** Code edit in same window

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

*** Babel code evaluation

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (ruby . t)
     (emacs-lisp . t)
     (perl . t)
     (java . t)
     (haskell . t)
     (gnuplot . t)
     (sh . t)))
#+END_SRC

*** Latex document classes
#+BEGIN_SRC emacs-lisp
  (defun my-org-custom-latex-classes ()
    ;; use: #+LaTeX_CLASS: koma-article
    (add-to-list 'org-latex-classes
                 '("koma-article"
                   "\\documentclass{scrartcl}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    )
  (add-hook 'org-mode-hook 'my-org-custom-latex-classes)
#+END_SRC
*** CDLatex minor mode
[[http://orgmode.org/manual/CDLaTeX-mode.html#CDLaTeX-mode][org-manual cdlatex-mode]]
#+BEGIN_SRC emacs-lisp
  (use-package cdlatex
    :ensure t)

  (add-hook 'org-mode-hook
            (lambda ()
              (org-cdlatex-mode t)))
#+END_SRC
*** Latex export code syntax hightlighting (minted)

#+BEGIN_SRC emacs-lisp
  (defun my-org-latex-export-syntax-highlighting ()
    (setq org-latex-listings 'minted
          org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    (add-to-list 'org-latex-packages-alist '("" "minted"))

    ;; Must change to imagemagick or formula preview images won't work with minted :/
    ;; imagemagick process is much slower since it converts by way of -> pdf -> png
    (setq org-latex-create-formula-image-program 'imagemagick)
    )

  (add-hook 'org-mode-hook 'my-org-latex-export-syntax-highlighting)
#+END_SRC

*** Twitter bootstrap exporting [[https://github.com/marsmining/ox-twbs]['ow-twbs']]

#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+END_SRC

*** Skip footer in html exports

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

*** Export to octopress

#+BEGIN_SRC emacs-lisp
  (load-library "octorgopress")
#+END_SRC

*** visual line mode

Visually wrap text in org-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (visual-line-mode)))
#+END_SRC

** Dired-x

#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
#+END_SRC

*** [[http://www.emacswiki.org/emacs/DiredOmitMode][Omit Mode]]

Toggle with M-o

#+BEGIN_SRC emacs-lisp
  (setq-default dired-omit-files-p t)
  (setq dired-omit-files
          (concat dired-omit-files "\\|^\\.DS_Store$"))
  (add-hook 'dired-mode-hook '(lambda ()
                                (local-set-key (kbd "M-o") 'dired-omit-mode)))
#+END_SRC

** Auctex

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex)
#+END_SRC
** Neotree

#+BEGIN_SRC emacs-lisp
  ;;(use-package neotree
  ;;  :ensure t
  ;;    :init
  ;;    (setq neo-smart-open t)
  ;;    :bind ([f8] . neotree-toggle))
#+END_SRC

** Smart-tab

#+BEGIN_SRC emacs-lisp
  (use-package smart-tab
    :ensure t
    :demand t
    :config
    (global-smart-tab-mode 1)
    )
#+END_SRC

** Gnuplot
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot
    :mode (("\\.gnuplot\\'" . gnuplot-mode)
           ("\\.gp\\'" . gnuplot-mode))
    :ensure t)
#+END_SRC
** w3m browser
#+BEGIN_SRC emacs-lisp
  (use-package w3m
    :ensure t)

  (add-hook 'w3m-mode-hook
            (lambda ()
              (define-key w3m-mode-map (kbd "M-s") 'avy-goto-char-2)))

  ;;change default browser for 'browse-url'  to w3m
  (setq browse-url-browser-function 'w3m-goto-url-new-session)

  ;;change w3m user-agent to android
  (setq w3m-user-agent "Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC_Pyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.")

  (defun wikipedia-search (search-term)
    "Search for SEARCH-TERM on wikipedia"
    (interactive
     (let ((term (if mark-active
                     (buffer-substring (region-beginning) (region-end))
                   (word-at-point))))
       (list
        (read-string
         (format "Wikipedia (%s):" term) nil nil term)))
     )
    (browse-url
     (concat
      "http://en.m.wikipedia.org/w/index.php?search="
      search-term
      ))
    )
#+END_SRC
** Try (test packages without permanent install)

#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* Programming options and packages

** Use spaces for indent

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Auto-indent for all programming modes

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook '(lambda ()
                               (local-set-key (kbd "RET") 'newline-and-indent)))
#+END_SRC

** Make TAB smarter

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'smart-tab-mode)
#+END_SRC

** Delete trailing whitespace when saving

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Always end files with a newline

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

** Preserve user and group of backup files

Specially important using sudo or su

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying-when-mismatch t)
#+END_SRC

** Comment/uncomment region keybinds

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cc" 'comment-region)
  (global-set-key "\C-cu" 'uncomment-region)
#+END_SRC

** C-mode

#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
        c-basic-offset 4)
  (setq c-toggle-hungry-state t)
#+END_SRC

** Lisp-mode

Rainbow delimiters

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'lisp-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Smartparens

Auto-complete ([{ etc

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (require 'smartparens-config)
    (add-hook 'prog-mode-hook 'smartparens-mode)
    (add-hook 'prog-mode-hook 'show-paren-mode)
    (add-hook 'markdown-mode-hook 'smartparens-mode)
    (add-hook 'dart-mode-hook 'smartparens-mode)
    (add-hook 'gfm-mode-hook 'smartparens-mode)
    (add-hook 'org-mode-hook 'smartparens-mode
    (add-hook 'gnuplot-mode-hook 'smartparens-mode)))
#+END_SRC

** Web-mode

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.phpclass\\'"
           "\\.php\\'"
           "\\.js\\'"
           "\\.css\\'"
           "\\.html?\\'")
    :config
    (defun my-web-mode-hook ()
      "My settings for Web mode."
      (setq web-mode-markup-indent-offset 3)
      (setq web-mode-css-indent-offset 3)
      (setq web-mode-code-indent-offset 3)

      ;; Get colors from active theme
      (set-face-attribute 'web-mode-html-tag-face nil :foreground
                          (face-attribute 'font-lock-function-name-face :foreground))
      (set-face-attribute 'web-mode-html-attr-name-face nil :foreground
                          (face-attribute 'font-lock-type-face :foreground))
      (set-face-attribute 'web-mode-html-attr-value-face nil :foreground
                          (face-attribute 'font-lock-string-face :foreground))

      ;; Disable auto-pairing (Conflicts with smartparens-mode)
      (setq web-mode-disable-auto-pairing t)
      )
    (add-hook 'web-mode-hook  'my-web-mode-hook)

    ;; Make smartparens-mode play nice with web-mode, skip auto-completing <> inside code context
    (defun sp-webmode-is-code-context (id action context)
      (when (and (eq action 'insert)
                 (not (or (get-text-property (point) 'part-side) (get-text-property (point) 'block-side))))
        t))
    (sp-local-pair 'web-mode "<" nil :when '(sp-webmode-is-code-context)))
#+END_SRC

** Markdown-mode

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("\\.text\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)
           ("\\.md\\'" . markdown-mode)
           ("README\\.md\\'" . gfm-mode)
           ("\\.txt\\'" . gfm-mode))
    :config
    (defun markdown-custom ()
      "my-markdown-mode-hook"
      (setq markdown-open-command "~/local/bin/marked")
      ;; gfm = git-flavoured-markdown; http://github.com/alampros/Docter
      (setq markdown-command      "~/local/bin/gfm"))

    (add-hook 'markdown-mode-hook 'markdown-custom))
#+END_SRC

** Yaml-mode

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode "\\.yml\\'")
#+END_SRC

** Slime (lisp)

#+BEGIN_SRC emacs-lisp
  (defun my-slime-repl-hook ()
    ;; tab-completion in the REPL
    (add-to-list 'smart-tab-completion-functions-alist '(slime-repl-mode . slime-complete-symbol))
    ;; treat slime-repl as prog-mode
    (run-hooks 'prog-mode-hook)
    )
  (when (require 'slime nil t)
    (add-hook 'lisp-mode-hook (lambda () (slime-mode t)))
    (add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)))
    (setq inferior-lisp-program "sbcl")
    (slime-setup '(slime-fancy))
    (add-hook 'slime-repl-mode-hook 'my-slime-repl-hook))
#+END_SRC

** sh-mode

Disable << HEREDOC auto-completion

#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook
            (lambda ()
              (sh-electric-here-document-mode -1)))
#+END_SRC

** nqc (Lego RCX)

use c-mode for nqc files

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.nqc\\'" . c-mode))
#+END_SRC

** Lua-mode

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t
    :mode "\\.lua$"
    :interpreter "lua")
#+END_SRC

** Haskell-mode

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :mode "\\.hs$"
    :interpreter "ghc"
    :config
    (defun my-haskell-config ()
      "my haskell config hook"
      (setq haskell-process-suggest-remove-import-lines t)
      (setq haskell-process-auto-import-loaded-modules t)
      (setq haskell-process-log t)
      (define-key haskell-mode-map (kbd "C-c h") 'haskell-hoogle) ;; in the editor
      (interactive-haskell-mode)
      (define-key haskell-interactive-mode-map (kbd "C-c h") 'haskell-hoogle) ;; in the repl
      )
    (add-hook 'haskell-mode-hook 'my-haskell-config))
#+END_SRC

** Dart-mode

#+BEGIN_SRC emacs-lisp
  (use-package dart-mode
    :init (require 'compile)
    :ensure t
    :mode ("\\.dart\\'")
    :interpreter "dart")
#+END_SRC

* Themes, fonts and visual

** Default theme

#+BEGIN_SRC emacs-lisp
  (setq jee/loaded-default-theme nil)
  (defun jee/load-default-theme()
    (unless jee/loaded-default-theme
      (load-theme 'material t)            ;; <--- set default theme here
      (setq jee/loaded-default-theme t)))

  (use-package material-theme
    :ensure t
    :init (jee/load-default-theme))

  (use-package eclipse-theme
    :ensure t
    :init (jee/load-default-theme))

#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p) ;; no powerline in terminal
      (progn
        (use-package powerline
          :ensure t
          :demand
          :init (setq powerline-default-separator 'arrow-fade)
          ;; alternate arrow arrow-fade bar box brace butt chamfer contour curve rounded roundstub slant wave zigzag utf8
          :config (powerline-default-theme))))
#+END_SRC

** Window manager operations (Mac/Linux)

*** Save / restore window-sizes

#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p)
      (progn
        (load-library "restore-framegeometry")
        (add-hook 'after-init-hook 'load-framegeometry)
        (add-hook 'kill-emacs-hook 'save-framegeometry)))
#+END_SRC

*** Mac/Linux fonts

#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p)
      (progn
        (if (string-equal (window-system) "x")  ; x = linux, ns = cocoa
            (progn
              (set-default-font "Bitstream Vera Sans Mono-10" )) ; Linux

          (progn
            (set-default-font "Menlo 13")) ; Mac
          )))
#+END_SRC

*** Hide toolbar/menubar/scrollbar

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when (display-graphic-p)
    (scroll-bar-mode -1))
#+END_SRC

*** Title bar shows buffer name

#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p)
      (progn
        (setq frame-title-format '(buffer-file-name "Emacs: %b" ))))
#+END_SRC

*** Disable Ctrl-z

#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p)
      (progn
        (global-set-key "\C-z" (lambda () (interactive) (message "Zzzzzz...")))))
#+END_SRC

** Highlight current line

#+BEGIN_SRC emacs-lisp
  ;; Always highlight current line
  (global-hl-line-mode)

  ;; Except in terminal-modes
  (add-hook 'term-mode-hook
            (lambda()
              (setq-local global-hl-line-mode nil)))
  (add-hook 'eshell-mode-hook
            (lambda()
              (setq-local global-hl-line-mode nil)))
#+END_SRC

** Vertical splits by default

#+BEGIN_SRC emacs-lisp
  (setq split-height-threshold nil)
  (setq split-width-treshold 0)
#+END_SRC
